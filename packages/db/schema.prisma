// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "cockroachdb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum RoleTypes {
  USER
  ADMIN
  MODERATOR
  CREATOR
}

enum UserStatus {
  BANNED
  ACTIVE
}

enum ProductStatus {
  ACTIVE
  DRAFT
  ARCHIVE
}

enum FilterType {
  RADIO
  DROPDOWN
  CHECKBOX
}

enum SectionStatus {
  ACTIVE
  DRAFT
  ARCHIVE
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Role {
  id   String    @id @default(uuid())
  user User[]
  role RoleTypes @unique
}

model User {
  id String @id @default(uuid())

  name          String
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  roles         Role[]

  bio String @default("")

  status    UserStatus @default(ACTIVE)
  banReason String?

  accounts Account[]
  sessions Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Section {
  id String @id @default(uuid())

  name        String  @unique
  description String?
  cover       String?

  categories Category[] // Divine Orbs / Chaos Orbs

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id String @id @default(uuid())

  name        String // Divine Orbs
  description String?
  image       String?

  sectionId String
  section   Section @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  filters Filter[] // PLATFORM / DIFFICULTY / LEAGUE / ADDITIONAL OPTIONS

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([sectionId])
}

model Filter {
  id String @id @default(uuid())

  name String // DIFFICULTY
  type FilterType // RADIO

  options FilterOption[] // SOFTCORE / HARDCORE

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
}

model FilterOption {
  id String @id @default(uuid())

  label String // SOFTCORE

  filterId String
  filter   Filter @relation(fields: [filterId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([filterId])
}
